@page "/Product"
@inject ICatalogService CatalogService
@inject IBasketService BasketService
@inject NavigationManager NavManager
@implements IDisposable

<div class="container">
    <div class="row">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-page="Index">Home</a></li>
                    <li class="breadcrumb-item"><a asp-page="Product">Category</a></li>
                    <li class="breadcrumb-item active" aria-current="page">@SelectedCategory</li>
                </ol>
            </nav>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-12 col-sm-3">
            <div class="card bg-light mb-3">
                <div class="card-header bg-primary text-white text-uppercase"><i class="fa fa-list"></i> Categories</div>
                <ul class="list-group category_block">

                    @foreach (var category in CategoryList)
                    {
                        <li class="list-group-item">
                            <NavLink href="@($"/Product?categoryName={category}")">
                                @category
                            </NavLink>
                        </li>
                    }

                </ul>
            </div>

            <div class="card bg-light mb-3">
                <div class="card-header bg-success text-white text-uppercase">Last product</div>
                <div class="card-body">
                    <img asp-append-version="true" class="img-fluid" src="images/product/@ProductList.LastOrDefault()?.ImageFile" />
                    <h5 class="card-title">@ProductList?.LastOrDefault()?.Name</h5>
                    <p class="card-text">@ProductList?.LastOrDefault()?.Summary</p>
                    <p class="bloc_left_price">@ProductList?.LastOrDefault()?.Price $</p>
                </div>
            </div>

        </div>

        <div class="col">
            <div class="row">

                @foreach (var product in ProductList)
                {
                    <div class="col-12 col-md-6 col-lg-4 mb-2">
                        <_ProductItemPartial Model="@product" />
                    </div>
                }

                <div class="col-12">
                    <nav aria-label="...">
                        <ul class="pagination">
                            <li class="page-item disabled">
                                <a class="page-link" href="#" tabindex="-1">Previous</a>
                            </li>
                            <li class="page-item"><a class="page-link" href="#">1</a></li>
                            <li class="page-item active">
                                <a class="page-link" href="#">2 <span class="sr-only">(current)</span></a>
                            </li>
                            <li class="page-item"><a class="page-link" href="#">3</a></li>
                            <li class="page-item">
                                <a class="page-link" href="#">Next</a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public string SelectedCategory { get; set; }

    public string CategoryName { get; set; } = string.Empty;

    public IEnumerable<string> CategoryList { get; set; } = new List<string>();
    public IEnumerable<CatalogModel> ProductList { get; set; } = new List<CatalogModel>();

    protected override async Task OnInitializedAsync()
    {
        GetQueryCategoryStringValues();
        NavManager.LocationChanged += HandleLocationChanged;

        var productList = await CatalogService.GetCatalog();
        CategoryList = productList.Select(p => p.Category).Distinct();

        if (!string.IsNullOrWhiteSpace(CategoryName))
        {
            ProductList = productList.Where(p => p.Category == CategoryName);
            SelectedCategory = CategoryName;
        }
        else
        {
            ProductList = productList;
        }
    }

    void GetQueryCategoryStringValues()
    {
        var categoryName = string.Empty;
        NavManager.TryGetQueryString<string>("categoryName", out categoryName);
        CategoryName = categoryName;
    }

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        GetQueryCategoryStringValues();
        StateHasChanged();
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }
}